(use-trait nft-trait 'ST2J9NG5A4F2C0NP0NSSEKM27J2G7CKWXH4KPBFXE.nft-trait.nft-trait)
(use-trait ft-trait 'ST2J9NG5A4F2C0NP0NSSEKM27J2G7CKWXH4KPBFXE.sip-010-trait-ft-standard.sip-010-trait)

(define-constant contract-owner tx-sender)

(define-constant ERR_UNKNOWN_LISTING (err u2000))
(define-constant ERR_UNAUTHORISED (err u2001))
(define-constant ERR_ASSET_CONTRACT_NOT_WHITELISTED (err u2007))
(define-constant ERR_PAYMENT_CONTRACT_NOT_WHITELISTED (err u2008))
(define-constant ERR_NFT_ASSET_MISMATCH (err u2003))

(define-map listings
  uint
  {
    maker: principal,
    hi: uint,
    token-id: uint,
    nft-asset-contract: principal,
    payment-asset-contract: (optional principal)
  }
)

(define-data-var listing-nonce uint u0)

(define-map whitelisted-asset-contracts principal bool)

(define-read-only (is-whitelisted (asset-contract principal))
  (default-to false (map-get? whitelisted-asset-contracts asset-contract))
)

(define-public (set-whitelisted (asset-contract principal) (whitelisted bool))
  (begin
    (asserts! (is-eq contract-owner tx-sender) ERR_UNAUTHORISED)
    (ok (map-set whitelisted-asset-contracts asset-contract whitelisted))
  )
)

(define-private (transfer-nft
  (token-contract <nft-trait>)
  (token-id uint)
  (sender principal)
  (recipient principal)
)
  (contract-call? token-contract transfer token-id sender recipient)
)

(define-private (transfer-ft
  (token-contract <ft-trait>)
  (amount uint)
  (sender principal)
  (recipient principal)
)
  (contract-call? token-contract transfer amount sender recipient none)
)

(define-read-only (get-listing (listing-id uint))
  (map-get? listings listing-id)
)

(define-public (stake
  (nft-asset-contract <nft-trait>)
  (nft-asset {
    hi: uint,
    token-id: uint,
    payment-asset-contract: (optional principal)
  })
)
  (let ((listing-id (var-get listing-nonce)))
    (asserts! (is-whitelisted (contract-of nft-asset-contract)) ERR_ASSET_CONTRACT_NOT_WHITELISTED)
    (asserts! (match (get payment-asset-contract nft-asset)
      payment-asset
      (is-whitelisted payment-asset)
      true
    ) ERR_PAYMENT_CONTRACT_NOT_WHITELISTED)
    (try! (transfer-nft
      nft-asset-contract
      (get token-id nft-asset)
      tx-sender
      (as-contract tx-sender)
    ))
    (map-set listings listing-id (merge
      { maker: tx-sender, hi: block-height, nft-asset-contract: (contract-of nft-asset-contract) }
      nft-asset
    ))
    (var-set listing-nonce (+ listing-id u1))
    (print {listing-id: listing-id, token-id: (get token-id nft-asset), block-height: block-height, maker: tx-sender})
    (ok listing-id)
  )
)

(define-public (unstake (listing-id uint) (nft-asset-contract <nft-trait>))
  (let (
    (listing (unwrap! (map-get? listings listing-id) ERR_UNKNOWN_LISTING))
    (maker (get maker listing))
    (token-id (get token-id listing))
  )
    (asserts! (is-eq maker tx-sender) ERR_UNAUTHORISED)
    (asserts! (is-eq
      (get nft-asset-contract listing)
      (contract-of nft-asset-contract)
    ) ERR_NFT_ASSET_MISMATCH)
    
    ;; Delete the listing and transfer the NFT back to the maker
    (map-delete listings listing-id)
    ;; Perform the NFT transfer in the `as-contract` context
    (try! (as-contract (contract-call? 'ST2J9NG5A4F2C0NP0NSSEKM27J2G7CKWXH4KPBFXE.Your-NFT-Name transfer token-id tx-sender maker)))
    
    (print {listing-id: listing-id, token-id: token-id, maker: maker, block-height: block-height})
    (ok listing-id)
  )
)


(define-public (claim (listing-id uint) (rock-token-contract <ft-trait>))
  (let (
    (listing (unwrap! (map-get? listings listing-id) ERR_UNKNOWN_LISTING))
    (maker (get maker listing))
    (height (get hi listing))
    (rock-height (- block-height height))
  )
    (asserts! (is-eq maker tx-sender) ERR_UNAUTHORISED)
    
    ;; Transfer the reward tokens to the maker (tx-sender)

    (try! (as-contract (contract-call? 'ST2J9NG5A4F2C0NP0NSSEKM27J2G7CKWXH4KPBFXE.stacks-rock transfer (* rock-height u10000) tx-sender maker none)))
    
    ;; Reset the `hi` of the listing to the current block-height
    (map-set listings listing-id (merge listing { hi: block-height }))
    
    (print {listing-id: listing-id, maker: maker, block-height: block-height})
    (ok listing-id)
  )
)
