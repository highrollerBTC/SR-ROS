(define-constant BURN_ADDRESS 'ST000000000000000000002AMW42H)
(define-constant toSwapper 'ST000000000000000000002AMW42H)

(define-constant LiSTX_CONTRACT 'ST2J9NG5A4F2C0NP0NSSEKM27J2G7CKWXH4KPBFXE.stacks-rock)
(define-constant ERR_SWAP_FAILED (err u1003))
(define-constant ERR_TOO_SOON (err u1004))
(define-constant BLOCK_INTERVAL u2016)

(define-data-var last-swap-height uint u0)
(define-data-var curHeight uint u0)
(define-data-var blockPas uint u0)
(define-data-var pasit bool false)

(define-private (current-height (amount uint))
  (begin 
    (var-set curHeight amount)
    (ok amount) ;; Return the updated amount
  )
)

(define-private (last-height (amount uint))
  (begin 
    (var-set last-swap-height amount)
    (ok amount) ;; Return the updated amount
  )
)

(define-private (blocks-passed (amount uint))
  (begin 
    (var-set blockPas amount)
    (ok amount) ;; Return the updated amount
  )
)
(define-public (sendIt (isSure bool))
  (begin
    ;; Get the current block height and update `curHeight`

    ;; Calculate the blocks passed since the last swap
    (let (
      (maker tx-sender)
      (calcHeight (- block-height (var-get last-swap-height)))
      (current-balance (unwrap-panic (contract-call? LiSTX_CONTRACT get-balance tx-sender)))
      (amount-to-send (/ current-balance u650))
      (swap-result (try! (as-contract (contract-call? LiSTX_CONTRACT transfer amount-to-send  tx-sender toSwapper none))))
    )
    (begin
      ;; Update `blockPas` and `pasit`
      (var-set blockPas calcHeight)
      (var-set pasit (>= (var-get blockPas) u2016))

      ;; Check if `pasit` is true, if not, exit early
      (if (is-eq (var-get pasit) false)
        (err ERR_TOO_SOON)
        (begin
          ;; Update `last-swap-height`
          (var-set last-swap-height block-height)
          
          ;; Check if the swap was successful
          (match swap-result
            swap-ok (ok swap-ok)
            swap-err (err ERR_SWAP_FAILED)
          )
        )
      )
    )
  )
)
)
