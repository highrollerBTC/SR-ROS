(define-constant two u2)
(define-constant three u3)
(define-constant six u6)
(define-data-var contract-owner principal tx-sender)


(define-data-var current-prime uint u0)        
(define-data-var last-checked-index uint u0)    
(define-data-var last-check-value uint u5)     
(define-data-var is-check-active bool false)    


(define-private (is-divisible (n uint) (divisor uint))
  (is-eq (mod n divisor) u0)
)


(define-public (start-prime-check (n uint))
  (begin

    (if (<= n u1)
        (err u400) 
        (begin
          (asserts! (not (var-get is-check-active)) (err u401)) 
          (var-set current-prime n)
          (var-set last-check-value u5) 
          (var-set is-check-active true) 
          (ok { prime: n })
        )
    )
  )
)

;; Check small primes directly (2 or 3)
(define-private (check-small-primes (n uint))
  (if (is-eq n u2)
      (ok true)
      (if (is-eq n u3)
          (ok true)
          (ok false)
      )
  )
)

;; Check divisibility by 2 or 3
(define-private (check-divisibility-by-2-or-3 (n uint))
  (if (is-divisible n two)
      (ok false) ;; Not prime, divisible by 2
      (if (is-divisible n three)
          (ok false) ;; Not prime, divisible by 3
          (ok true) ;; Continue checking
      )
  )
)

;; Check if i^2 > n
(define-private (check-i-squared (i uint) (n uint))
  (let ((i-squared (* i i)))
    (if (>= i-squared n)
        (ok true) ;; Prime, since i^2 > n
        (ok false) ;; Continue with further checks
    )
  )
)

;; Main function: incremental prime check
(define-public (incremental-is-prime)
  (begin
    ;; Ensure that a check is currently active
    (asserts! (var-get is-check-active) (err u402)) ;; 402 error if no active check
    
    (let (
      (n (var-get current-prime))          ;; Get the current prime number being checked
      (i (var-get last-check-value))       ;; Get the last divisor used for checking
    )
      (begin
        ;; 1. Handle small primes
        (let ((small-prime-result (unwrap-panic (check-small-primes n) )))
          (if (is-eq small-prime-result true)
              (begin
                (var-set is-check-active false)
                (ok true) ;; Number is small prime (2 or 3)
              )
              ;; 2. Check divisibility by 2 or 3
              (let ((divisibility-result (unwrap-panic (check-divisibility-by-2-or-3 n) )))
                (if (is-eq divisibility-result false)
                    (begin
                      (var-set is-check-active false)
                      (ok false) ;; Not prime, divisible by 2 or 3
                    )
                    ;; 3. Check if i^2 > n
                    (let ((i-squared-result (unwrap-panic (check-i-squared i n) )))
                      (if (is-eq i-squared-result true)
                          (begin
                            (var-set is-check-active false)
                            (ok true) ;; Prime, as i^2 > n
                          )
                          ;; 4. Increment i by 6 for the next iteration
                          (ok (var-set last-check-value (+ i six)))
                      )
                    )
                )
              )
          )
        )
      )
    )
  )
)





(define-public (reset-prime-check)
  (begin
    (asserts! (is-eq tx-sender (var-get contract-owner)) (err u403)) 
    (var-set last-check-value u5)
    (var-set current-prime u0)
    (var-set is-check-active false)
    (ok true)
  )
)

(define-public (get-prime-check-status)
  (ok {
    current-prime: (var-get current-prime),
    last-check-value: (var-get last-check-value),
    is-check-active: (var-get is-check-active)
  })
)
