;; Testnet configuration
(use-trait v-ft-trait 'ST2J9NG5A4F2C0NP0NSSEKM27J2G7CKWXH4KPBFXE.sip-010-trait-ft-standard.sip-010-trait)
(use-trait v-share-fee-to-trait 'ST2J9NG5A4F2C0NP0NSSEKM27J2G7CKWXH4KPBFXE.univ2-share-fee-to-trait.share-fee-to-trait)
(use-trait a-ft-trait 'ST2J9NG5A4F2C0NP0NSSEKM27J2G7CKWXH4KPBFXE.sip-010-trait-ft-standard.sip-010-trait)

(define-constant BURN_ADDRESS 'ST000000000000000000002AMW42H)
(define-constant STAKING_POOL 'ST000000000000000000002AMW42H)
(define-constant swap-contract 'ST2J9NG5A4F2C0NP0NSSEKM27J2G7CKWXH4KPBFXE.rsav4)
(define-constant WSTX_CONTRACT 'ST2J9NG5A4F2C0NP0NSSEKM27J2G7CKWXH4KPBFXE.stacks-rock)
(define-constant ERR_SWAP_FAILED (err u1003))
(define-constant ERR_SWAP_TOO_SOON (err u1004))
(define-constant ROCK_Contract 'ST2J9NG5A4F2C0NP0NSSEKM27J2G7CKWXH4KPBFXE.stacks-rock)
(define-constant WQSTXv3 'ST2J9NG5A4F2C0NP0NSSEKM27J2G7CKWXH4KPBFXE.stacks-rock)
(define-constant WSTXv2 'ST2J9NG5A4F2C0NP0NSSEKM27J2G7CKWXH4KPBFXE.stacks-rock)
(define-constant SWAP_INTERVAL u20)

;; Additional variables based on mainnet code
(define-data-var contract-owner principal 'ST2J9NG5A4F2C0NP0NSSEKM27J2G7CKWXH4KPBFXE)
(define-data-var stakingContract principal 'ST2J9NG5A4F2C0NP0NSSEKM27J2G7CKWXH4KPBFXE)
(define-data-var returnRate uint u650)
(define-data-var interval uint SWAP_INTERVAL)
(define-data-var balNow uint u0)
(define-data-var last-swap-height uint u0)
(define-data-var mult uint u2)

;; New functions from mainnet code
;; Using contract-caller (S/O Ghislo)

(define-public (setStaking (address principal))
  (begin
    (asserts! (is-eq contract-caller (var-get contract-owner)) (err u1005)) ;; Ensure only owner can set staking contract
    (var-set stakingContract address)
    (ok address)
  )
)

(define-public (setMult (new uint))
  (begin
    (asserts! (is-eq contract-caller (var-get contract-owner)) (err u1005)) ;; Ensure only owner can set staking contract
    (var-set mult new)
    (ok new)
  )
)

(define-public (setInterval (inter uint))
  (begin
    (asserts! (is-eq contract-caller (var-get contract-owner)) (err u1005)) ;; Ensure only owner can set the interval
    (var-set interval inter)
    (ok inter)
  )
)

(define-public (setRate (rate uint))
  (begin
    (asserts! (is-eq contract-caller (var-get contract-owner)) (err u1005)) ;; Ensure only owner can set the return rate
    (var-set returnRate rate)
    (ok rate)
  )
)

(define-public (setOwner (address principal))
  (begin
    (asserts! (is-eq contract-caller (var-get contract-owner)) (err u1005)) ;; Ensure only owner can set the contract owner
    (var-set contract-owner address)
    (ok address)
  )
)


(define-read-only (bal3)
 (ok (unwrap-panic (contract-call? 'ST2J9NG5A4F2C0NP0NSSEKM27J2G7CKWXH4KPBFXE.stacks-rock get-balance (as-contract tx-sender))))
)


(define-public (hot-swap)
  (begin
    ;; Get the current block height
    (let ((current-height block-height)
          (last-swap (var-get last-swap-height))
          (setInt (var-get interval)))
      ;; Check if the required interval has passed
      (if (< (- current-height last-swap) setInt)
        (ok u111) ;; Swap too soon
        (let (
          (current-balance (unwrap-panic (as-contract (contract-call? 'ST2J9NG5A4F2C0NP0NSSEKM27J2G7CKWXH4KPBFXE.stacks-rock get-balance tx-sender))))
          (amount-to-send (/ current-balance (var-get returnRate)))
          (swap-result (as-contract (contract-call? 
            'ST2J9NG5A4F2C0NP0NSSEKM27J2G7CKWXH4KPBFXE.rsavNew 
            swap
            amount-to-send  ;; Amount based on returnRate
            u69000000              ;; Hardcoded value
            true            ;; Hardcoded boolean
            (tuple (a 'ST2J9NG5A4F2C0NP0NSSEKM27J2G7CKWXH4KPBFXE.stacks-rock) (b 'ST2J9NG5A4F2C0NP0NSSEKM27J2G7CKWXH4KPBFXE.stacks-rock))  ;; Hardcoded tuple with constants
            'ST2J9NG5A4F2C0NP0NSSEKM27J2G7CKWXH4KPBFXE.stacks-rock
            (tuple (a 'ST2J9NG5A4F2C0NP0NSSEKM27J2G7CKWXH4KPBFXE.stacks-rock) (b 'ST2J9NG5A4F2C0NP0NSSEKM27J2G7CKWXH4KPBFXE.stacks-rock))  ;; Hardcoded tuple with constants
            (tuple (a u5000000))  ;; Hardcoded tuple for a-factors
          )))
        )
        ;; Check if the swap was successful
        (match swap-result
          swap-ok 
            (begin
              ;; Update the last swap height
              (var-set last-swap-height current-height)
              (ok swap-ok))
          swap-err 
            (err ERR_SWAP_FAILED)
        ))))
  )
)
;; Mainnet `send-to-burn` function with testnet constants
(define-public (send-to-burn (amount uint))
  (begin
    (try! (as-contract (contract-call? 'ST2J9NG5A4F2C0NP0NSSEKM27J2G7CKWXH4KPBFXE.stacks-rock transfer amount tx-sender BURN_ADDRESS none)))
    (ok amount)
  )
)

;; Mainnet `return` function added
(define-public (return (amount uint))
  (begin
    (asserts! (is-eq contract-caller (var-get contract-owner)) (err u1005)) ;; Ensure only owner can set the contract owner
    (try! (as-contract (contract-call? 'ST2J9NG5A4F2C0NP0NSSEKM27J2G7CKWXH4KPBFXE.stacks-rock transfer amount contract-caller (var-get contract-owner) none)))
    (ok amount)
  )
)

;; Mainnet `send-to-stake` function with testnet constants
(define-public (send-to-stake (amount uint))
  (begin
    (try! (as-contract (contract-call? 'ST2J9NG5A4F2C0NP0NSSEKM27J2G7CKWXH4KPBFXE.stacks-rock transfer amount tx-sender (var-get stakingContract) none)))
    (ok amount)
  )
)
